#! /usr/bin/env python3

import sys, argparse, uuid, json, hmac, hashlib, binascii, requests


def parseParameters(params):
    res=[]
    for param in params:
        if param.startswith(('"', '{', '[')) or param in ("true", "false", "null"):
            res.append(json.loads(param))
        else:
            try:
                ival=int(param)
                res.append(ival)
            except:
                res.append(param)
    return res

parser=argparse.ArgumentParser(description="Test JSON-RPC 2.0 client with HMAC support")
parser.add_argument("url", nargs=1, help="URL of JSON-RPC 2.0 server")
parser.add_argument("method", nargs=1, help="Method name")
parser.add_argument("parameters", nargs="*", help="Method parameters")
parser.add_argument("--hmackey", nargs=1)
args=parser.parse_args()


id=str(uuid.uuid4())

j={}
j["jsonrpc"]="2.0"
j["id"]=id
j["method"]=args.method[0]
j["params"]=parseParameters(args.parameters)

data=json.dumps(j).encode("utf8")

headers={}
headers["Content-Type"]="application/json"
if args.hmackey is not None:
    digest=hmac.new(binascii.a2b_hex(args.hmackey[0]), data, hashlib.sha256).hexdigest()
    headers["HMAC-Signature"]=digest

try:
    r=requests.post(args.url[0], data=data, headers=headers)
    r.raise_for_status()
except requests.exceptions.HTTPError as e:
    sys.exit(str(e))
except Exception as e:
    sys.exit(str(e))

if args.hmackey is not None:
    digest=hmac.new(binascii.a2b_hex(args.hmackey[0]), r.content, hashlib.sha256).hexdigest()
    sig=r.headers.get("HMAC-Signature")
    if digest!=sig:
        sys.exit("HMAC signature verification failed")

j=r.json()
if j.get("id")!=id:
    sys.exit("JSON-RPC 2.0 request-response id doesn't match")

if "result" in j:
    print(json.dumps(j["result"], indent=2, sort_keys=True))
else:
    sys.exit("{0} {1}".format(j["error"]["code"], j["error"]["message"]))
